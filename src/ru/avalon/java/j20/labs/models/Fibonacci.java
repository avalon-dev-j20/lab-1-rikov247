package ru.avalon.java.j20.labs.models;

import java.util.Iterator;

/**
 * Модель получения последовательности чисел Фибоначчи.
 *
 * <p>
 * Числа Фибонааччи — элементы числовой последовательности 0, 1, 1, 2, 3, 5, 8,
 * 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,
 * 17711, … , в которой первые два числа равны либо 1 и 1, либо 0 и 1, а каждое
 * последующее число равно сумме двух предыдущих чисел. Названы в честь
 * средневекового математика Леонардо Пизанского (известного как Фибоначчи).
 *
 * @see
 * <a href="https://ru.wikipedia.org/wiki/%D0%A7%D0%B8%D1%81%D0%BB%D0%B0_%D0%A4%D0%B8%D0%B1%D0%BE%D0%BD%D0%B0%D1%87%D1%87%D0%B8">Числа
 * Фибоначчи</a>
 */
public class Fibonacci implements Iterable<Integer> { // класс Fibonacci реализует интерфейс Iterable (переборщик) для чисел типа Integer

    /**
     * Итератор, выполняющий обход последовательности чисел Фибоначчи.
     */
    private class FibonacciIterator implements Iterator<Integer> {

        private int exitCondition; // ограничение последовательности. Здесь расположена, чтобы видеть ее и в hasNext и в next
        private int n1 = 0; // первый элемент последовательности
        private int n2 = 1; // второй элемент последовательности

        /**
         * Определяет, есть ли следующее значение последовательности чисел
         * Фибоначчи. Сначала проверяется hasNext.
         *
         * @return {@code true}, если следующее число последовательности
         * существует. В обратном случае {@code false}.
         */
        @Override // Пункт 1.
        public boolean hasNext() {
            return exitCondition < length; // когда exitCondition будет равно length, то next уже выполняться не будет
        }

        /**
         * Возвращает следующее число последовательности чисел Фибоначчи.
         *
         * @return следующее число последовательности.
         */
        @Override // Пункт 2.
        public Integer next() {
            exitCondition++; // для искусственного ограничения последовательности  
            if (exitCondition == 1) { // для вывода в качестве первого значения последовательности цифры 0
                return 0;
            }
            int n = n1 + n2; // каждый член равен сумме двух предыдущих
            n1 = n2; // Первый член. Ему присваивается значение второго
            n2 = n; // Второй член. Ему присваивается значение суммы двух предыдущих
            return n; // Возвращается значение члена последовательности, получившегося после сложения двух предыдущих членов
        }
    }

    /**
     * Возвращает итератор, позволяющий выполнить обход последовательности чисел
     * Фибоначчи.
     *
     * @return итератор последовательности чисел Фибоначчи
     */
    @Override // Пункт 3.
    public Iterator<Integer> iterator() {
        return new FibonacciIterator(); // создается новый экземпляр, который возвращает значение одного элемента
    }
    
    private int length; // Так как последовательность Фибоначчи бесконечна, то для практики ее нужно ограничить, что и устанавливается переменной длины последовательности
    public Fibonacci(int length) { // инициализация последовательности с выбором длины последовательности
        this.length = length;
    }
}
